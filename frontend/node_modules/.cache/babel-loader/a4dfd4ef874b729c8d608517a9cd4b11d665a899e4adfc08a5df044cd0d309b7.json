{"ast":null,"code":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Outlet, Link, useNavigate } from 'react-router-dom';\nimport API from '../api';\nimport { jwtDecode } from 'jwt-decode'; // to decode JWT export default function DashboardLayout() { const [tenantInfo, setTenantInfo] = useState(null); const [tenantId, setTenantId] = useState(null); // for multi-tenancy const [overview, setOverview] = useState(null); const [eventSummary, setEventSummary] = useState(null); const [topCustomersChartData, setTopCustomersChartData] = useState([]); const [salesTrend, setSalesTrend] = useState([]); const [error, setError] = useState(''); const [loading, setLoading] = useState(true); const [dataSource, setDataSource] = useState('sample'); // 'sample' or 'shopify' const navigate = useNavigate(); // --- Extract tenantId from JWT stored in localStorage --- useEffect(() => { const token = localStorage.getItem('token'); if (token) { try { const decoded = jwtDecode(token); setTenantId(decoded.tenantId); } catch (err) { console.error('Invalid token', err); handleLogout(); } } }, []); const handleLogout = useCallback(() => { localStorage.removeItem('token'); navigate('/login'); }, [navigate]); const fetchData = useCallback(async () => { if (!tenantId) return; // tenantId must exist try { setLoading(true); const headers = { 'x-tenant-id': tenantId }; let overviewRes, eventSummaryRes, salesTrendRes, topCustomersChartRes; if (dataSource === 'sample') { // Sample data endpoints [overviewRes, eventSummaryRes, salesTrendRes, topCustomersChartRes] = await Promise.all([ API.get('/dashboard/overview', { headers }), API.get('/dashboard/events-summary', { headers }), API.get('/dashboard/sales-trend', { headers }), API.get('/dashboard/top-customers-chart', { headers }) ]); } else if (dataSource === 'shopify') { // Fetch Shopify data const [productsRes, customersRes, ordersRes] = await Promise.all([ API.get('/shopify/sync/products', { headers }), API.get('/shopify/sync/customers', { headers }), API.get('/shopify/sync/orders', { headers }) ]); const customers = customersRes.data.data || []; const orders = ordersRes.data.data || []; // Overview overviewRes = { data: { totalCustomers: customers.length, totalOrders: orders.length, revenue: orders.reduce( (sum, order) => sum + parseFloat(order.total_price || 0), 0 ) } }; // Event summary (placeholder) eventSummaryRes = { data: {} }; // Sales trend (last 30 days) const today = new Date(); const past30Days = Array.from({ length: 30 }).map((_, i) => { const date = new Date(today); date.setDate(today.getDate() - i); const dateStr = date.toISOString().slice(0, 10); const dailyRevenue = orders .filter(o => o.created_at.slice(0, 10) === dateStr) .reduce((sum, o) => sum + parseFloat(o.total_price || 0), 0); return { date: dateStr, total: dailyRevenue }; }).reverse(); salesTrendRes = { data: past30Days }; // Top customers (top 5 by spend) const topCustomersMap = {}; orders.forEach(order => { const customer = order.customer; if (customer?.id) { if (!topCustomersMap[customer.id]) { const c = customers.find(cust => cust.id === customer.id); topCustomersMap[customer.id] = { id: customer.id, name: c ? ${c.first_name || ''} ${c.last_name || ''}.trim() || 'Unknown' : 'Unknown', spend: 0 }; } topCustomersMap[customer.id].spend += parseFloat(order.total_price || 0); } }); topCustomersChartRes = { data: Object.values(topCustomersMap) .sort((a, b) => b.spend - a.spend) .slice(0, 5) .map(c => ({ name: c.name, spend: parseFloat(c.spend.toFixed(2)) })) }; } // Tenant info const tenantInfoRes = await API.get('/dashboard/tenant-info', { headers }); // Update state setTenantInfo(tenantInfoRes.data); setOverview(overviewRes.data); setEventSummary(eventSummaryRes.data); setSalesTrend(salesTrendRes.data); setTopCustomersChartData(topCustomersChartRes.data); setError(''); } catch (err) { console.error(err); setError('Failed to fetch dashboard data.'); if (err.response?.status === 401) handleLogout(); } finally { setLoading(false); } }, [dataSource, tenantId, handleLogout]); // Refresh data when dataSource or tenantId changes useEffect(() => { fetchData(); }, [fetchData, dataSource, tenantId]); if (loading) return <h2>Loading dashboard...</h2>; return ( <div style={{ padding: '20px' }}> {/* Header */} <div style={{ display: 'flex', justifyContent: 'space-between', background: 'linear-gradient(90deg, #4e54c8, #8f94fb)', padding: '10px 20px', alignItems: 'center', marginBottom: '20px', color: '#fff', boxShadow: '0 4px 12px rgba(0,0,0,0.1)' }}> <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}> {tenantInfo?.logoUrl && ( <img src={tenantInfo.logoUrl} alt={${tenantInfo.name} Logo} style={{ height: '50px', width: '50px', objectFit: 'contain' }} /> )} <div> <h2 style={{ margin: 0 }}>{tenantInfo ? tenantInfo.name : 'Dashboard'}</h2> <p style={{ margin: '5px 0', color: '#fff' }}>Owner: {tenantInfo?.adminEmail || '...'}</p> </div> </div> <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}> {/* Data Source Toggle */} <button onClick={() => setDataSource('sample')} disabled={dataSource === 'sample'} style={{ backgroundColor: dataSource === 'sample' ? '#4CAF50' : '#bbb', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: '8px', cursor: dataSource === 'sample' ? 'not-allowed' : 'pointer', transition: '0.3s' }} > Sample Data </button> <button onClick={() => setDataSource('shopify')} disabled={dataSource === 'shopify'} style={{ backgroundColor: dataSource === 'shopify' ? '#4CAF50' : '#bbb', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: '8px', cursor: dataSource === 'shopify' ? 'not-allowed' : 'pointer', transition: '0.3s' }} > Shopify Data </button> <button onClick={handleLogout} style={{ padding: '8px 12px', width: 'auto' }}>Logout</button> </div> </div> {/* Navigation Links */} <nav style={{ margin: '40px 0', display: 'flex', gap: '30px', justifyContent: 'center', flexWrap: 'wrap' }}> {['Overview', 'Sales Trend', 'Orders', 'Top Customers', 'Customer History'].map((page, i) => ( <Link key={i} to={/dashboard/${page.toLowerCase().replace(' ', '-')}} style={{ fontSize: '24px', fontWeight: '700', border: '1px solid #ddd', borderRadius: '12px', padding: '20px', textAlign: 'center', width: '250px', textDecoration: 'none', color: '#333', boxShadow: '0 4px 12px rgba(0,0,0,0.1)', transition: 'transform 0.2s, box-shadow 0.2s', backgroundColor: '#749dc9ff', }} > {page} </Link> ))} </nav> {/* Display error */} {error && <div style={{ color: 'red', margin: '10px 0' }}>{error}</div>} {/* Render subpage and pass context */} <Outlet context={{ overview, eventSummary, topCustomersChartData, salesTrend, dataSource, tenantId }} /> </div> ); }","map":{"version":3,"names":["React","useState","useEffect","useCallback","Outlet","Link","useNavigate","API","jwtDecode"],"sources":["C:/Users/HP/Downloads/xeno_project_v2/frontend/src/components/DashboardLayout.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'; import { Outlet, Link, useNavigate } from 'react-router-dom'; import API from '../api'; import { jwtDecode } from 'jwt-decode'; // to decode JWT export default function DashboardLayout() { const [tenantInfo, setTenantInfo] = useState(null); const [tenantId, setTenantId] = useState(null); // for multi-tenancy const [overview, setOverview] = useState(null); const [eventSummary, setEventSummary] = useState(null); const [topCustomersChartData, setTopCustomersChartData] = useState([]); const [salesTrend, setSalesTrend] = useState([]); const [error, setError] = useState(''); const [loading, setLoading] = useState(true); const [dataSource, setDataSource] = useState('sample'); // 'sample' or 'shopify' const navigate = useNavigate(); // --- Extract tenantId from JWT stored in localStorage --- useEffect(() => { const token = localStorage.getItem('token'); if (token) { try { const decoded = jwtDecode(token); setTenantId(decoded.tenantId); } catch (err) { console.error('Invalid token', err); handleLogout(); } } }, []); const handleLogout = useCallback(() => { localStorage.removeItem('token'); navigate('/login'); }, [navigate]); const fetchData = useCallback(async () => { if (!tenantId) return; // tenantId must exist try { setLoading(true); const headers = { 'x-tenant-id': tenantId }; let overviewRes, eventSummaryRes, salesTrendRes, topCustomersChartRes; if (dataSource === 'sample') { // Sample data endpoints [overviewRes, eventSummaryRes, salesTrendRes, topCustomersChartRes] = await Promise.all([ API.get('/dashboard/overview', { headers }), API.get('/dashboard/events-summary', { headers }), API.get('/dashboard/sales-trend', { headers }), API.get('/dashboard/top-customers-chart', { headers }) ]); } else if (dataSource === 'shopify') { // Fetch Shopify data const [productsRes, customersRes, ordersRes] = await Promise.all([ API.get('/shopify/sync/products', { headers }), API.get('/shopify/sync/customers', { headers }), API.get('/shopify/sync/orders', { headers }) ]); const customers = customersRes.data.data || []; const orders = ordersRes.data.data || []; // Overview overviewRes = { data: { totalCustomers: customers.length, totalOrders: orders.length, revenue: orders.reduce( (sum, order) => sum + parseFloat(order.total_price || 0), 0 ) } }; // Event summary (placeholder) eventSummaryRes = { data: {} }; // Sales trend (last 30 days) const today = new Date(); const past30Days = Array.from({ length: 30 }).map((_, i) => { const date = new Date(today); date.setDate(today.getDate() - i); const dateStr = date.toISOString().slice(0, 10); const dailyRevenue = orders .filter(o => o.created_at.slice(0, 10) === dateStr) .reduce((sum, o) => sum + parseFloat(o.total_price || 0), 0); return { date: dateStr, total: dailyRevenue }; }).reverse(); salesTrendRes = { data: past30Days }; // Top customers (top 5 by spend) const topCustomersMap = {}; orders.forEach(order => { const customer = order.customer; if (customer?.id) { if (!topCustomersMap[customer.id]) { const c = customers.find(cust => cust.id === customer.id); topCustomersMap[customer.id] = { id: customer.id, name: c ? ${c.first_name || ''} ${c.last_name || ''}.trim() || 'Unknown' : 'Unknown', spend: 0 }; } topCustomersMap[customer.id].spend += parseFloat(order.total_price || 0); } }); topCustomersChartRes = { data: Object.values(topCustomersMap) .sort((a, b) => b.spend - a.spend) .slice(0, 5) .map(c => ({ name: c.name, spend: parseFloat(c.spend.toFixed(2)) })) }; } // Tenant info const tenantInfoRes = await API.get('/dashboard/tenant-info', { headers }); // Update state setTenantInfo(tenantInfoRes.data); setOverview(overviewRes.data); setEventSummary(eventSummaryRes.data); setSalesTrend(salesTrendRes.data); setTopCustomersChartData(topCustomersChartRes.data); setError(''); } catch (err) { console.error(err); setError('Failed to fetch dashboard data.'); if (err.response?.status === 401) handleLogout(); } finally { setLoading(false); } }, [dataSource, tenantId, handleLogout]); // Refresh data when dataSource or tenantId changes useEffect(() => { fetchData(); }, [fetchData, dataSource, tenantId]); if (loading) return <h2>Loading dashboard...</h2>; return ( <div style={{ padding: '20px' }}> {/* Header */} <div style={{ display: 'flex', justifyContent: 'space-between', background: 'linear-gradient(90deg, #4e54c8, #8f94fb)', padding: '10px 20px', alignItems: 'center', marginBottom: '20px', color: '#fff', boxShadow: '0 4px 12px rgba(0,0,0,0.1)' }}> <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}> {tenantInfo?.logoUrl && ( <img src={tenantInfo.logoUrl} alt={${tenantInfo.name} Logo} style={{ height: '50px', width: '50px', objectFit: 'contain' }} /> )} <div> <h2 style={{ margin: 0 }}>{tenantInfo ? tenantInfo.name : 'Dashboard'}</h2> <p style={{ margin: '5px 0', color: '#fff' }}>Owner: {tenantInfo?.adminEmail || '...'}</p> </div> </div> <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}> {/* Data Source Toggle */} <button onClick={() => setDataSource('sample')} disabled={dataSource === 'sample'} style={{ backgroundColor: dataSource === 'sample' ? '#4CAF50' : '#bbb', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: '8px', cursor: dataSource === 'sample' ? 'not-allowed' : 'pointer', transition: '0.3s' }} > Sample Data </button> <button onClick={() => setDataSource('shopify')} disabled={dataSource === 'shopify'} style={{ backgroundColor: dataSource === 'shopify' ? '#4CAF50' : '#bbb', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: '8px', cursor: dataSource === 'shopify' ? 'not-allowed' : 'pointer', transition: '0.3s' }} > Shopify Data </button> <button onClick={handleLogout} style={{ padding: '8px 12px', width: 'auto' }}>Logout</button> </div> </div> {/* Navigation Links */} <nav style={{ margin: '40px 0', display: 'flex', gap: '30px', justifyContent: 'center', flexWrap: 'wrap' }}> {['Overview', 'Sales Trend', 'Orders', 'Top Customers', 'Customer History'].map((page, i) => ( <Link key={i} to={/dashboard/${page.toLowerCase().replace(' ', '-')}} style={{ fontSize: '24px', fontWeight: '700', border: '1px solid #ddd', borderRadius: '12px', padding: '20px', textAlign: 'center', width: '250px', textDecoration: 'none', color: '#333', boxShadow: '0 4px 12px rgba(0,0,0,0.1)', transition: 'transform 0.2s, box-shadow 0.2s', backgroundColor: '#749dc9ff', }} > {page} </Link> ))} </nav> {/* Display error */} {error && <div style={{ color: 'red', margin: '10px 0' }}>{error}</div>} {/* Render subpage and pass context */} <Outlet context={{ overview, eventSummary, topCustomersChartData, salesTrend, dataSource, tenantId }} /> </div> ); }"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAAE,SAASC,MAAM,EAAEC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AAAE,OAAOC,GAAG,MAAM,QAAQ;AAAE,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}