{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\xeno_project_v2\\\\frontend\\\\src\\\\pages\\\\TopCustomersPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport TopCustomersBarChart from '../components/TopCustomersBarChart';\nimport API from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TopCustomersPage() {\n  _s();\n  const {\n    topCustomersChartData: initialData,\n    dataSource\n  } = useOutletContext();\n  const [topCustomersChartData, setTopCustomersChartData] = useState(initialData || []);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchTopCustomers = async () => {\n      try {\n        setLoading(true);\n        setError('');\n        if (dataSource === 'shopify') {\n          // Fetch Shopify customers and orders\n          const [customersRes, ordersRes] = await Promise.all([API.get('/shopify/sync/customers'), API.get('/shopify/sync/orders')]);\n          const customers = customersRes.data.data || [];\n          const orders = ordersRes.data.data || [];\n\n          // Map customerId to total spend\n          const customerSpendMap = {};\n          orders.forEach(order => {\n            var _order$customer;\n            const customerId = (_order$customer = order.customer) === null || _order$customer === void 0 ? void 0 : _order$customer.id;\n            if (!customerId) return;\n            if (!customerSpendMap[customerId]) {\n              const customer = customers.find(c => c.id === customerId);\n              customerSpendMap[customerId] = {\n                name: customer ? `${customer.first_name || ''} ${customer.last_name || ''}`.trim() || 'Unknown' : 'Unknown',\n                spend: 0\n              };\n            }\n            customerSpendMap[customerId].spend += parseFloat(order.total_price || 0);\n          });\n\n          // Take top 5 customers by spend\n          const top5 = Object.values(customerSpendMap).sort((a, b) => b.spend - a.spend).slice(0, 5).map(c => ({\n            name: c.name,\n            spend: parseFloat(c.spend.toFixed(2))\n          }));\n          setTopCustomersChartData(top5.length > 0 ? top5 : [{\n            name: 'No Data',\n            spend: 0\n          }]);\n        } else {\n          // Sample data\n          setTopCustomersChartData(initialData || []);\n        }\n      } catch (err) {\n        console.error('Error fetching top customers:', err);\n        setError('Failed to fetch top customers.');\n        setTopCustomersChartData([{\n          name: 'No Data',\n          spend: 0\n        }]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTopCustomers();\n  }, [dataSource, initialData]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading top customers...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'red'\n    },\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"widget\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Top 5 Customers by Spend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TopCustomersBarChart, {\n      data: topCustomersChartData,\n      xKey: \"name\",\n      yKey: \"spend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(TopCustomersPage, \"NgN3BiCKGSHF7k3FdMKZG8zhhgs=\", false, function () {\n  return [useOutletContext];\n});\n_c = TopCustomersPage;\nvar _c;\n$RefreshReg$(_c, \"TopCustomersPage\");","map":{"version":3,"names":["React","useState","useEffect","useOutletContext","TopCustomersBarChart","API","jsxDEV","_jsxDEV","TopCustomersPage","_s","topCustomersChartData","initialData","dataSource","setTopCustomersChartData","loading","setLoading","error","setError","fetchTopCustomers","customersRes","ordersRes","Promise","all","get","customers","data","orders","customerSpendMap","forEach","order","_order$customer","customerId","customer","id","find","c","name","first_name","last_name","trim","spend","parseFloat","total_price","top5","Object","values","sort","a","b","slice","map","toFixed","length","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","className","xKey","yKey","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/xeno_project_v2/frontend/src/pages/TopCustomersPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useOutletContext } from 'react-router-dom';\r\nimport TopCustomersBarChart from '../components/TopCustomersBarChart';\r\nimport API from '../api';\r\n\r\nexport default function TopCustomersPage() {\r\n  const { topCustomersChartData: initialData, dataSource } = useOutletContext();\r\n  const [topCustomersChartData, setTopCustomersChartData] = useState(initialData || []);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchTopCustomers = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError('');\r\n\r\n        if (dataSource === 'shopify') {\r\n          // Fetch Shopify customers and orders\r\n          const [customersRes, ordersRes] = await Promise.all([\r\n            API.get('/shopify/sync/customers'),\r\n            API.get('/shopify/sync/orders')\r\n          ]);\r\n\r\n          const customers = customersRes.data.data || [];\r\n          const orders = ordersRes.data.data || [];\r\n\r\n          // Map customerId to total spend\r\n          const customerSpendMap = {};\r\n          orders.forEach(order => {\r\n            const customerId = order.customer?.id;\r\n            if (!customerId) return;\r\n\r\n            if (!customerSpendMap[customerId]) {\r\n              const customer = customers.find(c => c.id === customerId);\r\n              customerSpendMap[customerId] = {\r\n                name: customer\r\n                  ? `${customer.first_name || ''} ${customer.last_name || ''}`.trim() || 'Unknown'\r\n                  : 'Unknown',\r\n                spend: 0\r\n              };\r\n            }\r\n\r\n            customerSpendMap[customerId].spend += parseFloat(order.total_price || 0);\r\n          });\r\n\r\n          // Take top 5 customers by spend\r\n          const top5 = Object.values(customerSpendMap)\r\n            .sort((a, b) => b.spend - a.spend)\r\n            .slice(0, 5)\r\n            .map(c => ({\r\n              name: c.name,\r\n              spend: parseFloat(c.spend.toFixed(2))\r\n            }));\r\n\r\n          setTopCustomersChartData(top5.length > 0 ? top5 : [{ name: 'No Data', spend: 0 }]);\r\n        } else {\r\n          // Sample data\r\n          setTopCustomersChartData(initialData || []);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching top customers:', err);\r\n        setError('Failed to fetch top customers.');\r\n        setTopCustomersChartData([{ name: 'No Data', spend: 0 }]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTopCustomers();\r\n  }, [dataSource, initialData]);\r\n\r\n  if (loading) return <div>Loading top customers...</div>;\r\n  if (error) return <div style={{ color: 'red' }}>{error}</div>;\r\n\r\n  return (\r\n    <div className=\"widget\">\r\n      <h3>Top 5 Customers by Spend</h3>\r\n      <TopCustomersBarChart data={topCustomersChartData} xKey=\"name\" yKey=\"spend\" />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}