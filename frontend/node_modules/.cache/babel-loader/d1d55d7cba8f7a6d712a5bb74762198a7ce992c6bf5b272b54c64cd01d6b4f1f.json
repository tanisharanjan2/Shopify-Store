{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\xeno_project_v2\\\\frontend\\\\src\\\\components\\\\DashboardLayout.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Outlet, Link, useNavigate } from 'react-router-dom';\nimport API from '../api';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DashboardLayout() {\n  _s();\n  const [tenantInfo, setTenantInfo] = useState(null);\n  const [overview, setOverview] = useState(null);\n  // ... other state variables are the same ...\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [loadingMessage, setLoadingMessage] = useState(''); // For user feedback\n  const navigate = useNavigate();\n\n  // --- 1. SIMPLIFIED: `fetchData` now has only ONE job: display what's in our database ---\n  const fetchData = useCallback(async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      handleLogout();\n      return;\n    }\n    const {\n      tenantId\n    } = jwtDecode(token);\n    try {\n      setLoading(true);\n      const headers = {\n        'x-tenant-id': tenantId,\n        'Authorization': `Bearer ${token}`\n      };\n      const [tenantInfoRes, overviewRes, eventSummaryRes, salesTrendRes, topCustomersChartRes] = await Promise.all([API.get('/dashboard/tenant-info', {\n        headers\n      }), API.get('/dashboard/overview', {\n        headers\n      }), API.get('/dashboard/events-summary', {\n        headers\n      }), API.get('/dashboard/sales-trend', {\n        headers\n      }), API.get('/dashboard/top-customers-chart', {\n        headers\n      })]);\n      setTenantInfo(tenantInfoRes.data);\n      setOverview(overviewRes.data);\n      setEventSummary(eventSummaryRes.data);\n      setSalesTrend(salesTrendRes.data);\n      setTopCustomersChartData(topCustomersChartRes.data);\n      setError('');\n    } catch (err) {\n      var _err$response;\n      console.error(err);\n      setError('Failed to fetch dashboard data.');\n      if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) handleLogout();\n    } finally {\n      setLoading(false);\n      setLoadingMessage('');\n    }\n  }, [navigate]); // Removed handleLogout dependency cycle\n\n  const handleLogout = useCallback(() => {\n    localStorage.removeItem('token');\n    navigate('/login');\n  }, [navigate]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // --- 2. NEW: Specific handler for syncing from Shopify ---\n  const handleSyncShopify = async () => {\n    const token = localStorage.getItem('token');\n    const {\n      tenantId\n    } = jwtDecode(token);\n    const headers = {\n      'x-tenant-id': tenantId,\n      'Authorization': `Bearer ${token}`\n    };\n    try {\n      setError('');\n      setLoadingMessage('Connecting to Shopify...');\n      setLoadingMessage('Syncing products...');\n      await API.get('/shopify/sync/products', {\n        headers\n      });\n      setLoadingMessage('Syncing customers...');\n      await API.get('/shopify/sync/customers', {\n        headers\n      });\n      setLoadingMessage('Syncing orders...');\n      await API.get('/shopify/sync/orders', {\n        headers\n      });\n      setLoadingMessage('Refreshing dashboard...');\n      await fetchData(); // Refresh the display with the new data\n    } catch (err) {\n      setError('Failed to sync from Shopify. Check credentials and server logs.');\n      console.error(err);\n      setLoadingMessage('');\n    }\n  };\n\n  // --- 3. NEW: Specific handler for ingesting sample data ---\n  const handleIngestSampleData = async () => {\n    const token = localStorage.getItem('token');\n    const {\n      tenantId\n    } = jwtDecode(token);\n    const headers = {\n      'x-tenant-id': tenantId,\n      'Authorization': `Bearer ${token}`\n    };\n    try {\n      setLoadingMessage('Loading sample data...');\n      setError('');\n\n      // Your sample data payloads go here\n      await API.post('/ingest/products', [/* sample products */], {\n        headers\n      });\n      await API.post('/ingest/customers', [/* sample customers */], {\n        headers\n      });\n      await API.post('/ingest/orders', [/* sample orders */], {\n        headers\n      });\n      await fetchData(); // Refresh the display with the new data\n    } catch (err) {\n      setError('Failed to ingest sample data.');\n      console.error(err);\n      setLoadingMessage('');\n    }\n  };\n  if (loading && !loadingMessage) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Loading dashboard...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 42\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [overview && overview.totalCustomers === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {/* your emptyStyle */},\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your dashboard is empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Choose a data source to get started.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px',\n          justifyContent: 'center',\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleIngestSampleData,\n          disabled: !!loadingMessage,\n          children: \"Load Sample Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSyncShopify,\n          disabled: !!loadingMessage,\n          children: \"Sync from Shopify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), loadingMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginTop: '15px'\n        },\n        children: loadingMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Outlet, {\n      context: {\n        overview,\n        eventSummary,\n        topCustomersChartData,\n        salesTrend\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(DashboardLayout, \"C2FANJwqG/kX3PfKVmfQ8uiAqhk=\", false, function () {\n  return [useNavigate];\n});\n_c = DashboardLayout;\nvar _c;\n$RefreshReg$(_c, \"DashboardLayout\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Outlet","Link","useNavigate","API","jwtDecode","jsxDEV","_jsxDEV","DashboardLayout","_s","tenantInfo","setTenantInfo","overview","setOverview","error","setError","loading","setLoading","loadingMessage","setLoadingMessage","navigate","fetchData","token","localStorage","getItem","handleLogout","tenantId","headers","tenantInfoRes","overviewRes","eventSummaryRes","salesTrendRes","topCustomersChartRes","Promise","all","get","data","setEventSummary","setSalesTrend","setTopCustomersChartData","err","_err$response","console","response","status","removeItem","handleSyncShopify","handleIngestSampleData","post","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","totalCustomers","display","gap","justifyContent","marginTop","onClick","disabled","context","eventSummary","topCustomersChartData","salesTrend","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/xeno_project_v2/frontend/src/components/DashboardLayout.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Outlet, Link, useNavigate } from 'react-router-dom';\r\nimport API from '../api';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nexport default function DashboardLayout() {\r\n  const [tenantInfo, setTenantInfo] = useState(null);\r\n  const [overview, setOverview] = useState(null);\r\n  // ... other state variables are the same ...\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [loadingMessage, setLoadingMessage] = useState(''); // For user feedback\r\n  const navigate = useNavigate();\r\n\r\n  // --- 1. SIMPLIFIED: `fetchData` now has only ONE job: display what's in our database ---\r\n  const fetchData = useCallback(async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      handleLogout();\r\n      return;\r\n    }\r\n    const { tenantId } = jwtDecode(token);\r\n\r\n    try {\r\n      setLoading(true);\r\n      const headers = { 'x-tenant-id': tenantId, 'Authorization': `Bearer ${token}` };\r\n\r\n      const [tenantInfoRes, overviewRes, eventSummaryRes, salesTrendRes, topCustomersChartRes] = await Promise.all([\r\n        API.get('/dashboard/tenant-info', { headers }),\r\n        API.get('/dashboard/overview', { headers }),\r\n        API.get('/dashboard/events-summary', { headers }),\r\n        API.get('/dashboard/sales-trend', { headers }),\r\n        API.get('/dashboard/top-customers-chart', { headers })\r\n      ]);\r\n\r\n      setTenantInfo(tenantInfoRes.data);\r\n      setOverview(overviewRes.data);\r\n      setEventSummary(eventSummaryRes.data);\r\n      setSalesTrend(salesTrendRes.data);\r\n      setTopCustomersChartData(topCustomersChartRes.data);\r\n      setError('');\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError('Failed to fetch dashboard data.');\r\n      if (err.response?.status === 401) handleLogout();\r\n    } finally {\r\n      setLoading(false);\r\n      setLoadingMessage('');\r\n    }\r\n  }, [navigate]); // Removed handleLogout dependency cycle\r\n\r\n  const handleLogout = useCallback(() => {\r\n    localStorage.removeItem('token');\r\n    navigate('/login');\r\n  }, [navigate]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  // --- 2. NEW: Specific handler for syncing from Shopify ---\r\n  const handleSyncShopify = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const { tenantId } = jwtDecode(token);\r\n    const headers = { 'x-tenant-id': tenantId, 'Authorization': `Bearer ${token}` };\r\n\r\n    try {\r\n      setError('');\r\n      setLoadingMessage('Connecting to Shopify...');\r\n      \r\n      setLoadingMessage('Syncing products...');\r\n      await API.get('/shopify/sync/products', { headers });\r\n\r\n      setLoadingMessage('Syncing customers...');\r\n      await API.get('/shopify/sync/customers', { headers });\r\n\r\n      setLoadingMessage('Syncing orders...');\r\n      await API.get('/shopify/sync/orders', { headers });\r\n      \r\n      setLoadingMessage('Refreshing dashboard...');\r\n      await fetchData(); // Refresh the display with the new data\r\n\r\n    } catch (err) {\r\n      setError('Failed to sync from Shopify. Check credentials and server logs.');\r\n      console.error(err);\r\n      setLoadingMessage('');\r\n    }\r\n  };\r\n\r\n  // --- 3. NEW: Specific handler for ingesting sample data ---\r\n  const handleIngestSampleData = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const { tenantId } = jwtDecode(token);\r\n    const headers = { 'x-tenant-id': tenantId, 'Authorization': `Bearer ${token}` };\r\n    \r\n    try {\r\n      setLoadingMessage('Loading sample data...');\r\n      setError('');\r\n\r\n      // Your sample data payloads go here\r\n      await API.post('/ingest/products', [/* sample products */], { headers });\r\n      await API.post('/ingest/customers', [/* sample customers */], { headers });\r\n      await API.post('/ingest/orders', [/* sample orders */], { headers });\r\n      \r\n      await fetchData(); // Refresh the display with the new data\r\n    } catch (err) {\r\n      setError('Failed to ingest sample data.');\r\n      console.error(err);\r\n      setLoadingMessage('');\r\n    }\r\n  };\r\n\r\n  if (loading && !loadingMessage) return <h2>Loading dashboard...</h2>;\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      {/* ... (Your header JSX is unchanged) ... */}\r\n      \r\n      {/* --- 4. MODIFIED: Buttons only appear when dashboard is empty --- */}\r\n      {overview && overview.totalCustomers === 0 && (\r\n        <div style={{ /* your emptyStyle */ }}>\r\n          <h4>Your dashboard is empty!</h4>\r\n          <p>Choose a data source to get started.</p>\r\n          <div style={{ display: 'flex', gap: '20px', justifyContent: 'center', marginTop: '20px' }}>\r\n            <button onClick={handleIngestSampleData} disabled={!!loadingMessage}>\r\n              Load Sample Data\r\n            </button>\r\n            <button onClick={handleSyncShopify} disabled={!!loadingMessage}>\r\n              Sync from Shopify\r\n            </button>\r\n          </div>\r\n          {loadingMessage && <p style={{ marginTop: '15px' }}>{loadingMessage}</p>}\r\n        </div>\r\n      )}\r\n      \r\n      {/* ... (Your nav links and Outlet are unchanged) ... */}\r\n      <Outlet context={{ overview, eventSummary, topCustomersChartData, salesTrend }} />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}